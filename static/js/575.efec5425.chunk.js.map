{"version":3,"file":"static/js/575.efec5425.chunk.js","mappings":"mNAgQA,MA1CA,WA6BE,OACE,gBAAKA,UAAU,GAAE,UACf,mBACEC,IAAI,mTACJD,UAAU,YACVE,QAAQ,OACRC,eAAe,gCAMvB,ECvJA,EAhGgB,WAEd,IAAQC,GAAMC,EAAAA,EAAAA,IAAe,CAAC,YAAtBD,EAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAG,eAAnCC,EAAO,KAAEC,EAAU,KAG1B,GAAmBC,EAAAA,EAAAA,YAAWC,EAAAA,GAAvBC,GAAyC,YAAjC,GAyBf,OAXAC,EAAAA,EAAAA,YAAU,WAZc,IAACC,IAaP,CACdC,SAAkB,OAARH,QAAQ,IAARA,OAAQ,EAARA,EAAUI,UAbtBC,OAAOC,QAAQJ,GAAQK,SAAQ,SAAAC,GACxBA,EAAE,WAAWN,EAAOM,EAAE,GAC7B,IAEAC,MAAM,UAhB0BC,4BAgBpB,cAAe,IAAIC,gBAAgBT,IAC5CU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAM,IACtBF,MAAK,SAAAC,GACJhB,EAAWgB,EACb,IACCE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAK,YAAY,IAM7CG,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,UAEd,GAAG,CAAS,OAARtB,QAAQ,IAARA,OAAQ,EAARA,EAAUI,YAIZ,iCACE,UAACmB,EAAA,EAAM,YACL,kEACA,iBAAMC,KAAK,cAAcC,QAAQ,6IACjC,iBAAMD,KAAK,cAAcC,QAAQ,4IACjC,iBAAMD,KAAK,WAAWC,QAAQ,mDAEhC,qBAASpC,UAAU,UAAS,WAC1B,gBAAKA,UAAU,UAAS,UACtB,wBAAKI,EAAE,cAET,iBAAKJ,UAAU,aAAY,WACzB,gBAAKA,UAAU,cAAa,SAEjB,OAAPO,QAAO,IAAPA,OAAO,EAAPA,EAAS8B,KAAI,SAAAC,GACX,OACE,iBAAsBtC,UAAU,OAAM,WACpC,gBAAKA,UAAU,OAAM,UACnB,cAAGA,WAAe,OAAJsC,QAAI,IAAJA,OAAI,EAAJA,EAAMC,OAAQ,UAE9B,iBAAKvC,UAAU,OAAM,WACnB,eAAIwC,GAAG,gBAAgBC,wBAAyB,CAAEC,OAAY,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMK,SAChE,cAAGH,GAAG,gBAAgBC,wBAAyB,CAAEC,OAAY,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMA,aANrD,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMK,KAWpB,OAMJ,gBAAK3C,UAAU,cAAa,UAC1B,6BACE,wBAAKI,EAAE,mBACP,iBAAKJ,UAAU,WAAU,WACvB,kBAAO2C,KAAK,OAAOR,KAAK,GAAGS,SAAS,cACpC,0BAAOxC,EAAE,kBAEX,iBAAKJ,UAAU,WAAU,WACvB,kBAAO2C,KAAK,OAAOR,KAAK,GAAGS,SAAS,cACpC,0BAAOxC,EAAE,eAEX,iBAAKJ,UAAU,WAAU,WACvB,qBAAU4C,SAAS,cACnB,0BAAOxC,EAAE,qBAEX,gBAAKJ,UAAU,WAAU,UACvB,mBAAQ6C,MAAO,CAAEC,QAAS,YAAaC,aAAc,OAAQC,gBAAiB,UAAWC,MAAO,SAAU,SAAE7C,EAAE,wBAMxH,gBAAKJ,UAAU,cAAa,UAC1B,SAAC,EAAc,QAKvB,C","sources":["components/contact/ReactGoogleMaps.js","components/contact/Contact.jsx"],"sourcesContent":["// import React, { useState, Fragment } from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n\r\n// // We will use these things from the lib\r\n// // https://react-google-maps-api-docs.netlify.com/\r\n// import {\r\n//   useLoadScript,\r\n//   GoogleMap,\r\n//   Marker,\r\n//   InfoWindow\r\n// } from \"@react-google-maps/api\";\r\n\r\n// export default function ReactGoogleMap() {\r\n//   // The things we need to track in state\r\n//   const [mapRef, setMapRef] = useState(null);\r\n//   const [selectedPlace, setSelectedPlace] = useState(null);\r\n//   const [markerMap, setMarkerMap] = useState({});\r\n//   const [center, setCenter] = useState({ lat: 44.076613, lng: -98.362239833 });\r\n//   const [zoom, setZoom] = useState(5);\r\n//   const [clickedLatLng, setClickedLatLng] = useState(null);\r\n//   const [infoOpen, setInfoOpen] = useState(false);\r\n\r\n//   // Load the Google maps scripts\r\n//   const { isLoaded } = useLoadScript({\r\n//     // Enter your own Google Maps API key\r\n//     id: 'google-map-script',\r\n//     googleMapsApiKey: \"YOUR_API_KEY\"\r\n//   });\r\n\r\n\r\n//   // The places I want to create markers for.\r\n//   // This could be a data-driven prop.\r\n//   const myPlaces = [\r\n//     { id: \"place1\", pos: { lat: 39.09366509575983, lng: -94.58751660204751 } },\r\n//     { id: \"place2\", pos: { lat: 39.10894664788252, lng: -94.57926449532226 } },\r\n//     { id: \"place3\", pos: { lat: 39.07602397235644, lng: -94.5184089401211 } }\r\n//   ];\r\n\r\n//   // Iterate myPlaces to size, center, and zoom map to contain all markers\r\n//   const fitBounds = map => {\r\n//     const bounds = new window.google.maps.LatLngBounds();\r\n//     myPlaces.map(place => {\r\n//       bounds.extend(place.pos);\r\n//       return place.id;\r\n//     });\r\n//     map.fitBounds(bounds);\r\n//   };\r\n\r\n//   const loadHandler = map => {\r\n//     // Store a reference to the google map instance in state\r\n//     setMapRef(map);\r\n//     // Fit map bounds to contain all markers\r\n//     fitBounds(map);\r\n//   };\r\n\r\n//   // We have to create a mapping of our places to actual Marker objects\r\n//   // const markerLoadHandler = (marker, place) => {\r\n//   //   return setMarkerMap(prevState => {\r\n//   //     return { ...prevState, [place.id]: marker };\r\n//   //   });\r\n//   // };\r\n\r\n//   // const markerClickHandler = (event, place) => {\r\n//   //   // Remember which place was clicked\r\n//   //   setSelectedPlace(place);\r\n\r\n//   //   // Required so clicking a 2nd marker works as expected\r\n//   //   if (infoOpen) {\r\n//   //     setInfoOpen(false);\r\n//   //   }\r\n\r\n//   //   setInfoOpen(true);\r\n\r\n//   //   // If you want to zoom in a little on marker click\r\n//   //   if (zoom < 13) {\r\n//   //     setZoom(13);\r\n//   //   }\r\n\r\n//   //   // if you want to center the selected Marker\r\n//   //   //setCenter(place.pos)\r\n//   // };\r\n\r\n//   return (\r\n//     <Fragment>\r\n//       <GoogleMap\r\n//         // Do stuff on map initial laod\r\n//         // onLoad={loadHandler}\r\n//         // Save the current center position in state\r\n//         // onCenterChanged={() => setCenter(mapRef.getCenter().toJSON())}\r\n//         // Save the user's map click position\r\n//         // onClick={e => setClickedLatLng(e.latLng.toJSON())}\r\n//         center={center}\r\n//         zoom={zoom}\r\n//         mapContainerStyle={{\r\n//           height: \"70vh\",\r\n//           width: \"100%\"\r\n//         }}\r\n//       >\r\n//         <Marker position={{ lat: 41.2222025, lng: 69.3099111 }} />\r\n//         {/* \r\n//         {myPlaces.map(place => (\r\n//           <Marker\r\n//             key={place.id}\r\n//             position={place.pos}\r\n//             onLoad={marker => markerLoadHandler(marker, place)}\r\n//             onClick={event => markerClickHandler(event, place)}\r\n//             // Not required, but if you want a custom icon:\r\n//             icon={{\r\n//               path:\r\n//                 \"M12.75 0l-2.25 2.25 2.25 2.25-5.25 6h-5.25l4.125 4.125-6.375 8.452v0.923h0.923l8.452-6.375 4.125 4.125v-5.25l6-5.25 2.25 2.25 2.25-2.25-11.25-11.25zM10.5 12.75l-1.5-1.5 5.25-5.25 1.5 1.5-5.25 5.25z\",\r\n//               fillColor: \"#0000ff\",\r\n//               fillOpacity: 1.0,\r\n//               strokeWeight: 0,\r\n//               scale: 1.25\r\n//             }}\r\n//           />\r\n//         ))} */}\r\n\r\n//         {infoOpen && selectedPlace && (\r\n//           <InfoWindow\r\n//             anchor={markerMap[selectedPlace.id]}\r\n//             onCloseClick={() => setInfoOpen(false)}\r\n//           >\r\n//             <div>\r\n//               <h3>{selectedPlace.id}</h3>\r\n//               <div>This is your info window content</div>\r\n//             </div>\r\n//           </InfoWindow>\r\n//         )}\r\n//       </GoogleMap>\r\n\r\n\r\n//     </Fragment>\r\n//   );\r\n\r\n\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react'\r\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\r\nimport './style.css'\r\n\r\nfunction ReactGoogleMap() {\r\n\r\n  // const containerStyle = {\r\n  //   width: '400px',\r\n  //   height: '400px'\r\n  // };\r\n\r\n  // const center = {\r\n  //   lat: -3.745,\r\n  //   lng: -38.523\r\n  // };\r\n  // const { isLoaded } = useJsApiLoader({\r\n  //   id: 'google-map-script',\r\n  //   googleMapsApiKey: \"YOUR_API_KEY\"\r\n  // })\r\n\r\n  // const [map, setMap] = React.useState(null)\r\n\r\n  // const onLoad = React.useCallback(function callback(map) {\r\n  //   // This is just an example of getting and using the map instance!!! don't just blindly copy!\r\n  //   const bounds = new window.google.maps.LatLngBounds(center);\r\n  //   map.fitBounds(bounds);\r\n\r\n  //   setMap(map)\r\n  // }, [])\r\n\r\n  // const onUnmount = React.useCallback(function callback(map) {\r\n  //   setMap(null)\r\n  // }, [])\r\n  return (\r\n    <div className=''>\r\n      <iframe\r\n        src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3000.9801760469554!2d69.30991111465423!3d41.22220247927967!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x38ae5e3f080ff865%3A0x37d1c6b721d18db2!2sOltintopgan%20ko&#39;chasi%2C%20Tashkent%2C%20O%60zbekiston!5e0!3m2!1suz!2s!4v1680222301805!5m2!1suz!2s\"\r\n        className='mapIframe'\r\n        loading=\"lazy\"\r\n        referrerpolicy=\"no-referrer-when-downgrade\">\r\n\r\n      </iframe>\r\n    </div>\r\n  )\r\n\r\n}\r\nexport default ReactGoogleMap\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { DetailsForDekoart } from \"../../ContextMenu/ContextMenu\";\r\nimport \"./style.css\";\r\nimport ReactGoogleMap from './ReactGoogleMaps'\r\nconst { REACT_APP_BASE_URL: url } = process.env;\r\n\r\nconst Contact = () => {\r\n\r\n  const { t } = useTranslation([\"contact\"]);\r\n\r\n  const [contact, setContact] = useState([])\r\n\r\n\r\n  const [itemList] = useContext(DetailsForDekoart)\r\n\r\n  const fetchGetAllData = (params) => {\r\n    Object.entries(params).forEach(i => {\r\n      if (!i[1]) delete params[i[0]]\r\n    })\r\n\r\n    fetch(`${url}/contact/?` + new URLSearchParams(params))\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setContact(res)\r\n      })\r\n      .catch(err => console.log(err, \"ERROrLIST\"))\r\n  }\r\n  useEffect(() => {\r\n    fetchGetAllData({\r\n      language: itemList?.typeLang,\r\n    })\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\",\r\n    });\r\n  }, [itemList?.typeLang])\r\n\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`Biz bilan bog'lanish>> DEKOART.UZ`}</title>\r\n        <meta name=\"description\" content=\"DEKOART” – Ozbekistonda tashqi va ichki yuzalar uchun eng zamonaviy, yuqori sifatli lok boyoq, devor qoplama mahsulolartidir.\" />\r\n        <meta name=\"description\" content=\"DEKOART TEKSTURA Teksturali fasad qoplamasiTa'rifi: Akrilik kopolimerlar asosli ishlatishga tayyor dekorativ qoplama.Xarakteristikasi:\" />\r\n        <meta name=\"keywords\" content=\"sadaf decocento dekoart krasska lak buyoq \" />\r\n      </Helmet>\r\n      <section className=\"contact\">\r\n        <div className=\"content\">\r\n          <h2>{t(\"title\")}</h2>\r\n        </div>\r\n        <div className=\"container1\">\r\n          <div className=\"contactInfo\">\r\n            {\r\n              contact?.map(data => {\r\n                return (\r\n                  <div key={data?.type} className=\"boxx\">\r\n                    <div className=\"icon\">\r\n                      <i className={data?.icon || null}></i>\r\n                    </div>\r\n                    <div className=\"text\">\r\n                      <h3 id=\"terms-content\" dangerouslySetInnerHTML={{ __html: data?.type }} />\r\n                      <p id=\"terms-content\" dangerouslySetInnerHTML={{ __html: data?.data }} />\r\n\r\n                    </div>\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n\r\n\r\n\r\n          </div>\r\n          <div className=\"contactForm\">\r\n            <form>\r\n              <h2>{t(\"messageTitle\")}</h2>\r\n              <div className=\"inputBox\">\r\n                <input type=\"text\" name=\"\" required=\"required\" />\r\n                <span>{t(\"fullname\")}</span>\r\n              </div>\r\n              <div className=\"inputBox\">\r\n                <input type=\"text\" name=\"\" required=\"required\" />\r\n                <span>{t(\"email\")}</span>\r\n              </div>\r\n              <div className=\"inputBox\">\r\n                <textarea required=\"required\"></textarea>\r\n                <span>{t(\"typeTextare\")}</span>\r\n              </div>\r\n              <div className=\"inputBox\">\r\n                <button style={{ padding: \"10px 30px\", borderRadius: \"10px\", backgroundColor: \"#0f3460\", color: \"white\" }}>{t(\"send\")}</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <div className=\"mapMeGoogle\">\r\n        <ReactGoogleMap />\r\n      </div>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"names":["className","src","loading","referrerpolicy","t","useTranslation","useState","contact","setContact","useContext","DetailsForDekoart","itemList","useEffect","params","language","typeLang","Object","entries","forEach","i","fetch","process","URLSearchParams","then","res","json","catch","err","console","log","window","scrollTo","top","behavior","Helmet","name","content","map","data","icon","id","dangerouslySetInnerHTML","__html","type","required","style","padding","borderRadius","backgroundColor","color"],"sourceRoot":""}